= turbo_frame_tag "max_score_result", data: {turbo: "true"} do
  %table#score-table.table.table-striped.table-bordered.table-condensed
    %thead
      %tr
        %th Login
        %th Name
        %th Remark
        - @problems.each do |p|
          %th.text-right= p.name.gsub('_',' ')
          %th.text-right= p.name.gsub('_',' ') + ' (time)'
        %th.text-right Total
        %th.text-right Passed
    %tbody
      - super_sum, super_pass = 0,0
      - @result[:score].each do |login,score|
        %tr
          %td= link_to login, stat_user_path(score['id'])
          %td= score['full_name']
          %td= score['remark']
          - sum,pass = 0,0
          - @problems.each do |p|
            - this_prob_score = score['prob_'+p.name] || 0; sum += this_prob_score
            - pass += 1 if this_prob_score >= 100
            %td.text-end= number_with_precision(score['prob_'+p.name], precision: 0)
            %td.text-end= score['time'+p.name].strftime('%Y/%m/%d %T') rescue nil
          - super_sum += sum
          - super_pass += pass
          %td.text-end= number_with_precision(sum, precision: 0)
          %td.text-end= pass
    %tfoot
      %tr
        %td Summation
        %td
        %td
        - @problems.each do |p|
          %td.text-end= number_with_delimiter(@result[:stat][p.name][:sum], precision: 0)
          %td
        %td.text-end= number_with_delimiter(super_sum, precision: 0)
        %td.text-end= number_with_delimiter(super_pass, precision: 0)
  :javascript
    $('#score-table').DataTable({
      paging: false,
      dom: 'Bfrtip',
      buttons: [
          'copyHtml5',
          'excelHtml5',
      ]
    })

    //history graph
    data = {
      labels: [#{@problems.pluck(:name).map{ |x| '"'+x+'"'}.join(',').html_safe}],
      datasets: [
        {
          label: 'Zero',
          borderColor: '#ff6384',
          backgroundColor: '#ffe0e6',
          borderWidth: 1,
          data: [#{@result[:count][:zero].join(',')}],
        }, {
          label: 'Partial',
          borderColor: '#36a2eb',
          backgroundColor: '#d7ecfb',
          borderWidth: 1,
          data: [#{@result[:count][:partial].join(',')}]
        }, {
          label: 'Full',
          borderColor: '#4bc0c0',
          backgroundColor: '#dbf2f2',
          borderWidth: 1,
          data: [#{@result[:count][:full].join(',')}]
        },
      ]
    }
    np = #{[1,@problems.count].max}
    config = {
      type: 'bar',
      data: data,
      options: {
        indexAxis: 'y', //horizontal bar
        aspectRatio: 17/np + (0.25*np),
        plugins: {
          legend: {
            display: false
          },
        },
        scales: {
          y: {
            stacked: true
          },
          x: {
            stacked: true
          }
        }
      }
    }
    if (typeof my_chart !== 'undefined') {
      my_chart.destroy()
    }
    Chart.defaults.font.size = 15
    //Chart.defaults.font.family = 'Sarabun Light'
    my_chart = new Chart($('#chart'),config)
