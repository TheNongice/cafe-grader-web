%h1 Submissions detail

.row
  .col-lg-4
    = render partial: 'shared/problem_select'
  .col-lg-4
    = render partial: 'shared/date_filter'
  .col-lg-4
    = render partial: 'shared/user_select'

.row.mt-3
  .col-lg-4
    .alert.alert-info
      %ul
        %li Display a maximum of 100,000 entries to save computation power
        %li You have to click refresh when changing the filter above
        %li From date is required, blank from date is convert to today
  .col-lg-8
    %canvas#chart

.row
  .col-sm-12
    %table#table.table.table-hover.table-condense.datatable{style: 'width: 100%'}


:javascript
  sub_count = null;
  submission_path = "#{submission_path(-1234)}"
  user_path = "#{stat_user_path(-1234)}"
  problem_path = "#{stat_problem_path(-1234)}"

  function sub_link_renderer( data, type, row) {
    return `<a href="${submission_path.replace("-1234",row['id'])}">\#${row['id']}</a>`;
  }
  function user_link_renderer( data, type, row) {
    return `<a href="${user_path.replace("-1234",row['user_id'])}">(${row['login']})</a> ${row['user_full_name']}`;
  }
  function problem_link_renderer( data, type, row) {
    return `<a href="${problem_path.replace("-1234",row['problem_id'])}">[${row['name']}]</a> ${row['full_name']}`;
  }
  function date_time_renderer( data, type, row) {
    return moment(data).format('YYYY-MM-DD hh:mm:ss')
  }

  $(document).on('import-map-loaded', (e) => {
    submission_table = $('#table').DataTable({
      dom: "<'row'<'col-sm-3'B><'col-sm-3'l><'col-sm-6'f>>" + "<'row'<'col-sm-12'tr>>" + "<'row'<'col-sm-5'i><'col-sm-7'p>>",
      autoWidth: true,
      pageLength: 50,
      processing: true,
      buttons: [
        {
          text: 'Refresh',
          action: (e,dt,node,config) => {
            submission_table.clear().draw()
            submission_table.ajax.reload( () => { submission_table.columns.adjust().draw() } )
          }
        },
        'copy',
        {
          extend: 'excel',
          title: 'Submission detail'
        }
      ],
      columns: [
        {title: 'Sub ID', data: 'id', render: sub_link_renderer },
        {title: 'User', data: 'login', render: user_link_renderer},
        {title: 'Problem', data: 'full_name', render: problem_link_renderer},
        {title: 'Language', data: 'pretty_name'},
        {title: 'Submit at', data: 'submitted_at', render: date_time_renderer},
        {title: 'Result', data: 'grader_comment', className: 'grader-comment'},
        {title: 'Score', data: 'points', className: 'text-end'},
        {title: 'IP', data: 'ip_address', className: 'grader-comment'},
      ],
      ajax: {
        url: '#{submission_query_report_path}',
        type: 'POST',
        data: (d) =>  {
          d.since_datetime = $('#since_datetime').val()
          d.until_datetime = $('#until_datetime').val()
          d.users = $("input[name='users']:checked").val()
          d.groups = $("#group_id").val()
          d.problems = $("input[name='problems']:checked").val()
          d.problem_id = $("#problem_id").val()
        },
        dataType: 'json',
        beforeSend: (request) => {
          request.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'));
        },
        dataSrc: function (json) {
          sub_count = json.sub_count_by_date || {}
          sub_date = Object.keys(sub_count).sort()
          //history graph
          data = {
            labels: sub_date.map( (x) => { return moment(x).locale('en-uk').format('D-MMM')} ),
            datasets: [
              {
                label: '#sub',
                data: sub_date.map( (x) => { return sub_count[x]; }),
              },
            ]
          }
          config = {
            type: 'line',
            data: data,
            options: {
              aspectRatio: 6,
              plugins: {
                legend: {
                  display: false,
                }
              },
              scales: {
                y: {
                  title: {
                    text: '#sub',
                    display: true,
                  }
                },
                x: {
                  ticks: {
                    maxRotation: 0,
                  }
                }
              }
            },
          }
          if (typeof my_chart !== 'undefined') {
            my_chart.destroy()
          }
          Chart.defaults.font.size = 15
          my_chart = new Chart($('#chart'),config)

          return json.data
        }
      }, //end ajax
    });


  });
