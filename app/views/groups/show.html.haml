%h1 Group members and problems
.row.my-4
  .col-md-6
    .card
      .card-body
        %h4 Group details
        .row.mb-3
          -#
            .col-md-12
              %b Name:
              = @group.name
          = key_pair(obj: @group, field: :name)
          = key_pair(obj: @group, field: :description)
        .row.mb-3
          .col-md-6
            = link_to 'Edit', edit_group_path(@group), class: 'btn btn-primary'
            = link_to 'Back', groups_path, class: 'btn btn-outline-secondary mx-2'
  .col-md-6
    = render partial: 'group_help'
.row.my-4{'data-controller': 'group'}
  .col-sm-12
    .card
      .card-body
        %ul.nav.nav-tabs.mb-3
          %li.nav-item
            %button.nav-link.active{data: {bs: {toggle: 'tab',target: '#tab-group-user'}}}
              Users
          %li.nav-item
            %button.nav-link{data: {bs: {toggle: 'tab',target: '#tab-group-problem'}}}
              Problems
        .tab-content
          #tab-group-user.tab-pane.fade.show.active
            .row
              .col-md-6
                =form_tag add_user_group_path(@group), class: 'form-inline', data: {turbo: true} do
                  .row.mb-2
                    .col-3
                      =label_tag :user_id, "Add these users", class: 'col-form-label'
                    .col-7
                      =select_tag :user_id, options_from_collection_for_select(User.all,'id','login_with_name'), class: 'select2', multiple: true, style: 'width: 100%';
                    .col-2
                      =submit_tag "Add", class: 'btn btn-primary'
                =form_tag add_user_by_group_group_path(@group), class: 'form-inline', data: {turbo: true} do
                  .row.mb-2
                    .col-3
                      =label_tag :group_ids, "Add all from groups", class: 'col-form-label'
                    .col-7
                      =select_tag :group_ids, options_from_collection_for_select(Group.all,'id','name'), class: 'select2', multiple: true, style: 'width: 100%';
                    .col-2
                      =submit_tag "Add", value: "Add", class: 'btn btn-primary'
                =form_with url: do_all_users_group_path(@group), data: {turbo: true} do |f|
                  .row.mb-2
                    .col-3
                    .col-9
                      = f.submit "Enable All", class: 'btn btn-primary', data: {action: 'click->group#set_command', value: 'enable'}
                      = f.submit "Disable All", class: 'btn btn-primary', data: {action: 'click->group#set_command', value: 'disable'}
                      = f.submit "Remove All", class: 'btn btn-danger', data: {action: 'click->group#set_command', value: 'remove'}
                  = f.hidden_field :command, value: 1, 'data-group-target': 'command'

              .col-md-6
                -# help
                .alert.alert-warning.shadow-md-2
                  %ul
                    %li
                      If you want to add several users to a group, it may be easier to just re-import the users in
                      = link_to 'New list of users', new_list_user_admin_index_path
                      page. You can also use
                      = link_to 'Bulk Manage User', bulk_manage_user_admin_index_path
                      page.
                    %li
                      Only enabled problems are shown to the enabled users of the group.
            = render partial: 'group_users'
          #tab-group-problem.tab-pane.fade
            %ul
              %li
                If you want to add several problem to a group, it may be easier to bulk manage them in the
                = link_to 'Bulk Manage Problems', manage_problems_path
                page.
              %li
                Only enabled problems are shown to the enabled users of the group.
              
            =form_tag add_problem_group_path(@group), data: {turbo: true} do
              .row
                .col-auto
                  =label_tag :problem_id, "Problem",class: 'col-form-label'
                .col-auto
                  =select_tag :problem_id, options_from_collection_for_select(Problem.all,'id','long_name'), class: 'select2', multiple: true, style: 'width: 25em';
                .col-auto
                  =submit_tag "Add",class: 'btn btn-primary', 'data-group-target': 'asdf'
            = render partial: 'group_problems'
  = form_with url: toggle_user_enable_group_path, 
    html: {'data-group-target': 'userForm', 'data-turbo': true} do |f|
    = f.hidden_field :user_id, 'data-group-target': 'userFormUserID'

= render 'shared/msg_modal'


:javascript
  function reload_table() {

    // user tables
    user_role_column = 2
    $('#user_table').DataTable({
      /*
      columns: [ 
        {data: 'login'},
        {data: 'full_name'},
        {data: 'role'},
        {data: 'remark'},
        {data: 'user_id'},
        {data: 'user_id'},
        {data: 'user_id'},
        {data: 'user_id'},
      ],
      */
      columnDefs: [{visible: false, targets: user_role_column}, {orderable: false, targets: [4,5,6,7]} ],
      destroy: true,
      paging: false,
      orderFixed: [2,'desc'],
      order: [[0,'asc']],
      drawCallback: function (settings) {
        var api = this.api();
        var rows = api.rows({ page: 'current' }).nodes();
        var last = null;
        api.column(user_role_column, { page: 'current' })
          .data()
          .each(function (group, i) {
              if (last !== group) {

                // set text for group row
                if (group == 'editor') {
                  role_group_text = '<tr class="table-success"><td colspan="7"> Editors (Can edit any problems) </td></tr>'
                } else if (group == 'reporter') {
                  role_group_text = '<tr class="table-warning"><td colspan="7"> Reporters (Can view submissions of any users) </td></tr>'
                } else {
                  role_group_text = '<tr class="table-info"><td colspan="7"> Users (Can only use available problems) </td></tr>'
                }

                //prepend group row
                $(rows).eq(i).before(role_group_text);
                last = group;
              }
          });
      },
    })

    // problem table
    $('#problem_table').DataTable({
      destroy: true,
      paging: false,
    })
  }


  //doc ready
  $(() => {
    reload_table();
  });
